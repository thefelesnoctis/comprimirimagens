<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comprimir Imagens</title>
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #2196F3;
            --danger-color: #f44336;
            --text-color: #333;
            --light-gray: #f5f5f5;
            --medium-gray: #e9e9e9;
            --dark-gray: #666;
            --white: #ffffff;
            --shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        * {
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            max-width: 100%;
            margin: 0;
            padding: 15px;
            background-color: var(--light-gray);
            color: var(--text-color);
            line-height: 1.5;
        }
        
        h1 {
            color: var(--text-color);
            text-align: center;
            font-size: 1.5rem;
            margin: 0 0 20px;
        }
        
        .upload-container {
            background-color: var(--white);
            border-radius: 8px;
            padding: 15px;
            box-shadow: var(--shadow);
            margin-bottom: 20px;
        }
        
        .compression-options {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 15px 0;
        }
        
        @media (min-width: 480px) {
            .compression-options {
                flex-direction: row;
                justify-content: space-between;
            }
        }
        
        .option {
            flex: 1;
            text-align: center;
            padding: 12px;
            border-radius: 5px;
            cursor: pointer;
            background-color: var(--medium-gray);
            transition: all 0.3s;
            font-size: 0.9rem;
        }
        
        .option.selected {
            background-color: var(--primary-color);
            color: var(--white);
        }
        
        .option:hover {
            background-color: #ddd;
        }
        
        .option.selected:hover {
            background-color: #45a049;
        }
        
        #file-input {
            display: none;
        }
        
        .file-upload-btn {
            display: block;
            width: 100%;
            padding: 12px;
            background-color: var(--secondary-color);
            color: var(--white);
            text-align: center;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            margin-bottom: 10px;
            border: none;
        }
        
        .file-upload-btn:hover {
            background-color: #0b7dda;
        }
        
        #file-list {
            margin-top: 15px;
            border-top: 1px solid #eee;
            padding-top: 15px;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
            font-size: 0.9rem;
        }
        
        .file-name {
            flex: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            padding-right: 10px;
        }
        
        .file-size {
            color: var(--dark-gray);
            font-size: 0.8rem;
            white-space: nowrap;
        }
        
        .remove-btn {
            color: var(--danger-color);
            cursor: pointer;
            margin-left: 10px;
            font-weight: bold;
            font-size: 1.1rem;
        }
        
        .compress-btn {
            display: block;
            width: 100%;
            padding: 12px;
            background-color: var(--primary-color);
            color: var(--white);
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 15px;
        }
        
        .compress-btn:hover {
            background-color: #45a049;
        }
        
        .compress-btn:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        
        .results {
            margin-top: 20px;
        }
        
        .result-item {
            background-color: var(--white);
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .result-content {
            display: flex;
            flex-direction: column;
        }
        
        @media (min-width: 480px) {
            .result-content {
                flex-direction: row;
                align-items: center;
            }
        }
        
        .result-preview {
            width: 100%;
            height: auto;
            max-width: 150px;
            max-height: 150px;
            object-fit: contain;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        
        @media (min-width: 480px) {
            .result-preview {
                width: 100px;
                height: 100px;
                margin-right: 15px;
                margin-bottom: 0;
            }
        }
        
        .result-info {
            flex: 1;
            width: 100%;
        }
        
        .result-stats {
            display: flex;
            flex-direction: column;
            gap: 5px;
            margin-top: 5px;
            color: var(--dark-gray);
            font-size: 0.85rem;
        }
        
        @media (min-width: 480px) {
            .result-stats {
                flex-direction: row;
                justify-content: space-between;
            }
        }
        
        .download-btn {
            padding: 8px 15px;
            background-color: var(--secondary-color);
            color: var(--white);
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            width: 100%;
            font-size: 0.9rem;
        }
        
        @media (min-width: 480px) {
            .download-btn {
                width: auto;
                margin-top: 0;
                margin-left: 15px;
            }
        }
        
        .download-btn:hover {
            background-color: #0b7dda;
        }
        
        .progress-container {
            width: 100%;
            background-color: var(--medium-gray);
            border-radius: 5px;
            margin-top: 8px;
        }
        
        .progress-bar {
            height: 8px;
            background-color: var(--primary-color);
            border-radius: 5px;
            width: 0%;
            transition: width 0.3s;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            display: none;
        }
        
        .spinner {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .empty-state {
            text-align: center;
            color: var(--dark-gray);
            padding: 20px;
            font-size: 0.9rem;
        }
        
        .actions-container {
            display: flex;
            flex-direction: column;
        }
        
        @media (min-width: 480px) {
            .actions-container {
                flex-direction: row;
                align-items: center;
                justify-content: space-between;
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <h1>Comprimir Imagens</h1>
    
    <div class="upload-container">
        <label for="file-input" class="file-upload-btn">Selecionar Arquivos</label>
        <input type="file" id="file-input" accept="image/*" multiple>
        
        <div class="compression-options">
            <div class="option selected" data-quality="0.9">Alto (90%)</div>
            <div class="option" data-quality="0.7">Médio (70%)</div>
            <div class="option" data-quality="0.5">Baixo (50%)</div>
        </div>
        
        <div id="file-list">
            <div class="empty-state">Nenhum arquivo selecionado</div>
        </div>
        
        <button id="compress-btn" class="compress-btn" disabled>Comprimir Imagens</button>
    </div>
    
    <div class="loading" id="loading">
        <div class="spinner"></div>
        <p>Comprimindo imagens...</p>
    </div>
    
    <div class="results" id="results"></div>

    <script>
        // Elementos DOM
        const fileInput = document.getElementById('file-input');
        const fileList = document.getElementById('file-list');
        const compressBtn = document.getElementById('compress-btn');
        const resultsContainer = document.getElementById('results');
        const loadingElement = document.getElementById('loading');
        const options = document.querySelectorAll('.option');
        
        // Estado
        let files = [];
        let selectedQuality = 0.9;
        
        // Eventos
        fileInput.addEventListener('change', handleFileSelect);
        compressBtn.addEventListener('click', compressImages);
        
        // Ouvintes de clique para opções de qualidade
        options.forEach(option => {
            option.addEventListener('click', () => {
                options.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                selectedQuality = parseFloat(option.dataset.quality);
            });
        });
        
        // Lidar com seleção de arquivos
        function handleFileSelect(e) {
            files = Array.from(e.target.files);
            updateFileList();
            compressBtn.disabled = files.length === 0;
        }
        
        // Atualizar a lista de arquivos na UI
        function updateFileList() {
            if (files.length === 0) {
                fileList.innerHTML = '<div class="empty-state">Nenhum arquivo selecionado</div>';
                return;
            }
            
            fileList.innerHTML = '';
            
            files.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                
                const fileName = document.createElement('span');
                fileName.className = 'file-name';
                fileName.textContent = file.name;
                
                const fileSize = document.createElement('span');
                fileSize.className = 'file-size';
                fileSize.textContent = formatFileSize(file.size);
                
                const removeBtn = document.createElement('span');
                removeBtn.className = 'remove-btn';
                removeBtn.textContent = '×';
                removeBtn.addEventListener('click', () => removeFile(index));
                
                fileItem.appendChild(fileName);
                fileItem.appendChild(fileSize);
                fileItem.appendChild(removeBtn);
                
                fileList.appendChild(fileItem);
            });
        }
        
        // Remover um arquivo da lista
        function removeFile(index) {
            files.splice(index, 1);
            updateFileList();
            compressBtn.disabled = files.length === 0;
        }
        
        // Formatar tamanho do arquivo
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        // Comprimir todas as imagens selecionadas
        async function compressImages() {
            if (files.length === 0) return;
            
            // Mostrar estado de carregamento
            loadingElement.style.display = 'block';
            resultsContainer.innerHTML = '';
            compressBtn.disabled = true;
            
            // Processar cada arquivo
            const compressionPromises = files.map(file => compressImage(file, selectedQuality));
            
            // Aguardar todas as compressões serem completadas
            const results = await Promise.all(compressionPromises);
            
            // Mostrar resultados
            displayResults(results);
            
            // Esconder estado de carregamento
            loadingElement.style.display = 'none';
            compressBtn.disabled = false;
        }
        
        // Comprimir uma única imagem
        function compressImage(file, quality) {
            return new Promise((resolve) => {
                const reader = new FileReader();
                
                reader.onload = function(event) {
                    const img = new Image();
                    
                    img.onload = function() {
                        const canvas = document.createElement('canvas');
                        const ctx = canvas.getContext('2d');
                        
                        // Calcular novas dimensões se necessário
                        const maxWidth = 2000;
                        const maxHeight = 2000;
                        let width = img.width;
                        let height = img.height;
                        
                        if (width > maxWidth) {
                            height *= maxWidth / width;
                            width = maxWidth;
                        }
                        
                        if (height > maxHeight) {
                            width *= maxHeight / height;
                            height = maxHeight;
                        }
                        
                        canvas.width = width;
                        canvas.height = height;
                        
                        // Desenhar imagem no canvas
                        ctx.drawImage(img, 0, 0, width, height);
                        
                        // Converter para blob com qualidade especificada
                        canvas.toBlob((blob) => {
                            const result = {
                                original: file,
                                compressed: blob,
                                originalSize: file.size,
                                compressedSize: blob.size,
                                quality: quality * 100
                            };
                            resolve(result);
                        }, 'image/jpeg', quality);
                    };
                    
                    img.src = event.target.result;
                };
                
                reader.readAsDataURL(file);
            });
        }
        
        // Mostrar resultados da compressão
        function displayResults(results) {
            resultsContainer.innerHTML = '';
            
            if (results.length === 0) {
                resultsContainer.innerHTML = '<div class="empty-state">Nenhum resultado para exibir</div>';
                return;
            }
            
            results.forEach(result => {
                const resultItem = document.createElement('div');
                resultItem.className = 'result-item';
                
                const resultContent = document.createElement('div');
                resultContent.className = 'result-content';
                
                // Pré-visualização da imagem
                const preview = document.createElement('img');
                preview.className = 'result-preview';
                preview.src = URL.createObjectURL(result.compressed);
                preview.alt = 'Imagem comprimida';
                
                // Container de informações
                const info = document.createElement('div');
                info.className = 'result-info';
                
                // Nome do arquivo
                const fileName = document.createElement('div');
                fileName.textContent = result.original.name;
                fileName.style.fontWeight = 'bold';
                fileName.style.fontSize = '0.95rem';
                
                // Estatísticas
                const stats = document.createElement('div');
                stats.className = 'result-stats';
                
                const originalSize = document.createElement('span');
                originalSize.textContent = `Original: ${formatFileSize(result.originalSize)}`;
                
                const compressedSize = document.createElement('span');
                compressedSize.textContent = `Comprimido: ${formatFileSize(result.compressedSize)}`;
                
                const reduction = document.createElement('span');
                const reductionPercent = ((result.originalSize - result.compressedSize) / result.originalSize * 100).toFixed(2);
                reduction.textContent = `Redução: ${reductionPercent}%`;
                
                // Barra de progresso
                const progressContainer = document.createElement('div');
                progressContainer.className = 'progress-container';
                
                const progressBar = document.createElement('div');
                progressBar.className = 'progress-bar';
                progressBar.style.width = `${100 - (result.compressedSize / result.originalSize * 100)}%`;
                
                progressContainer.appendChild(progressBar);
                
                // Container de ações
                const actionsContainer = document.createElement('div');
                actionsContainer.className = 'actions-container';
                
                // Botão de download
                const downloadBtn = document.createElement('button');
                downloadBtn.className = 'download-btn';
                downloadBtn.textContent = 'Baixar';
                downloadBtn.addEventListener('click', () => {
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(result.compressed);
                    link.download = `comprimido_${result.original.name}`;
                    link.click();
                });
                
                // Montar os elementos
                stats.appendChild(originalSize);
                stats.appendChild(compressedSize);
                stats.appendChild(reduction);
                
                info.appendChild(fileName);
                info.appendChild(stats);
                info.appendChild(progressContainer);
                
                actionsContainer.appendChild(info);
                actionsContainer.appendChild(downloadBtn);
                
                resultContent.appendChild(preview);
                resultContent.appendChild(actionsContainer);
                
                resultItem.appendChild(resultContent);
                resultsContainer.appendChild(resultItem);
            });
        }
    </script>
</body>
</html>
